{"version":3,"sources":["Header/Header.js","AddTaskItem/AddTaskItem.js","TaskItem/TaskItem.js","List/List.js","CreateNewList/NewList.js","App.js","serviceWorker.js","index.js"],"names":["Header","TaskItem","listId","addTask","useState","task","setTask","addAndResetTask","className","onClick","type","placeholder","value","onChange","target","onKeyPress","key","length","text","completed","id","deleteTask","toggleTask","defaultChecked","defaultValue","List","title","tasks","sort","a","b","dateCreated","map","NewList","smShow","setSmShow","listName","setListName","handleClose","Modal","size","show","onHide","aria-labelledby","closeButton","Title","Body","Footer","Button","variant","disabled","App","uuidv4","Date","now","lists","setLists","updatedTasks","list","console","log","filter","Container","Row","Col","sm","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qbAWeA,MARf,WACE,OACE,gCACE,4C,YCuBSC,MA1Bf,YAAmD,IAA/BC,EAA8B,EAA9BA,OAA8B,IAAtBC,eAAsB,MAAZ,aAAY,IACxBC,mBAAS,IADe,mBACzCC,EADyC,KACnCC,EADmC,KAa1CC,EAAkB,WACtBJ,EAAQE,EAAMH,GACdI,EAAQ,KAGV,OACE,yBAAKE,UAAU,eACb,0BAAMC,QAASF,GAAf,KACA,2BAAOG,KAAK,OAAOC,YAAY,kBAAkBC,MAAOP,EAAMQ,SAZ/C,SAAC,GAAqC,IAAD,IAAlCC,OAAkC,gBAAT,GAAS,GAAxBF,MAC9BN,OADsD,MAAhB,GAAgB,IAYgCS,WAlBjE,SAAC,GACV,UADsB,EAAVC,KACDX,EAAKY,QAC1BV,S,MCeSN,MApBf,YAAuG,IAAD,IAAlFiB,YAAkF,MAA3E,GAA2E,MAAvEC,iBAAuE,SAApDC,EAAoD,EAApDA,GAAoD,IAAhDC,kBAAgD,MAAnC,aAAmC,MAAzBC,kBAAyB,MAAZ,aAAY,EASpG,OACE,yBAAKd,UAAU,YACb,2BACE,2BAAOE,KAAK,WAAWa,eAAgBJ,EAAWV,QAPxC,WACda,EAAWF,MAOP,2BAAOV,KAAK,OAAOc,aAAcN,EAAMV,UAAS,+CAA0CW,EAAY,aAAe,MACrH,0BAAMV,QAbI,WACdY,EAAWD,KAYP,WCGOK,MAff,YAAqH,IAArGvB,EAAoG,EAApGA,OAAoG,IAA5FwB,aAA4F,MAApF,GAAoF,MAAhFC,aAAgF,MAAxE,GAAwE,MAApEN,kBAAoE,MAAvD,aAAuD,MAA7CC,kBAA6C,MAAhC,aAAgC,MAAtBnB,eAAsB,MAAZ,aAAY,EAIlH,OAFAwB,EAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,YAAcD,EAAEC,eAAaH,MAAK,qBAAGT,UAA6B,GAAK,KAG5F,yBAAKX,UAAU,QACb,4BAAKkB,GACL,kBAAC,EAAD,CAAaxB,OAAQA,EAAQC,QAASA,IACrCwB,EAAMK,KAAI,oBAAGd,YAAH,MAAU,GAAV,MAAcC,iBAAd,SAAiCC,EAAjC,EAAiCA,GAAjC,OACT,kBAAC,EAAD,CAAUJ,IAAKI,EAAIA,GAAIA,EAAIF,KAAMA,EAAMC,UAAWA,EAAWE,WAAYA,EAAYC,WAAYA,S,qBCmC1FW,MA3Cf,WAAoB,IAAD,EACW7B,oBAAS,GADpB,mBACV8B,EADU,KACFC,EADE,OAEe/B,mBAAS,IAFxB,mBAEVgC,EAFU,KAEAC,EAFA,KAIXC,EAAc,kBAAMH,GAAU,IAOpC,OACE,oCACE,yBAAK3B,UAAU,UAAUC,QARV,kBAAM0B,GAAU,KAS7B,2CACA,4BAAQzB,KAAK,SAASF,UAAU,oBAAhC,MAKF,kBAAC+B,EAAA,EAAD,CAAOC,KAAK,KAAKC,KAAMP,EAAQQ,OAAQ,kBAAMP,GAAU,IAAQQ,kBAAgB,gCAC7E,kBAACJ,EAAA,EAAMvC,OAAP,CAAc4C,aAAW,GACvB,kBAACL,EAAA,EAAMM,MAAP,CAAazB,GAAG,gCAAhB,oBAEF,kBAACmB,EAAA,EAAMO,KAAP,KACE,4CAEE,2BAAOpC,KAAK,OAAOC,YAAY,kBAAkBC,MAAOwB,EAAUvB,SApBrD,SAAC,GAAqC,IAAD,IAAlCC,OAAkC,gBAAT,GAAS,GAAxBF,MAClCyB,OAD0D,MAAhB,GAAgB,QAuBtD,kBAACE,EAAA,EAAMQ,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYxC,QAAS6B,GAArC,SAGA,kBAACU,EAAA,EAAD,CAAQC,QAAQ,UAAUxC,QAAS6B,EAAaY,UAAWd,GAA3D,oBCsDKe,MAlFf,WAAgB,IAAD,EACa/C,mBAAS,CACjC,CACEsB,MAAO,gBACPN,GAAIgC,cACJrB,YAAasB,KAAKC,MAClB3B,MAAO,CACL,CAAET,KAAM,kCAAmCC,WAAW,EAAMC,GAAIgC,cAAUrB,YAAasB,KAAKC,OAC5F,CAAEpC,KAAM,2BAA4BC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OACtF,CAAEpC,KAAM,0BAA2BC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OACrF,CAAEpC,KAAM,kCAAmCC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OAC7F,CAAEpC,KAAM,4BAA6BC,WAAW,EAAMC,GAAIgC,cAAUrB,YAAasB,KAAKC,SAG1F,CACE5B,MAAO,kBACPN,GAAIgC,cACJrB,YAAasB,KAAKC,MAClB3B,MAAO,CACL,CAAET,KAAM,kCAAmCC,WAAW,EAAMC,GAAIgC,cAAUrB,YAAasB,KAAKC,OAC5F,CAAEpC,KAAM,2BAA4BC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OACtF,CAAEpC,KAAM,0BAA2BC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OACrF,CAAEpC,KAAM,kCAAmCC,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,OAC7F,CAAEpC,KAAM,4BAA6BC,WAAW,EAAMC,GAAIgC,cAAUrB,YAAasB,KAAKC,WAvB/E,mBACNC,EADM,KACCC,EADD,KA4BPrD,EAAU,SAACE,EAAMe,GACrB,IAAMqC,EAAeF,EAAMvB,KAAI,SAAC0B,GAAU,IAAD,EAChBA,EAAf/B,aAD+B,MACvB,GADuB,EAEvC,OAAI+B,EAAKtC,KAAOA,EACP,2BAAKsC,GAAZ,IAAkB/B,MAAM,CAAE,CAAET,KAAMb,EAAMc,WAAW,EAAOC,GAAIgC,cAAUrB,YAAasB,KAAKC,QAAnE,mBAA+E3B,MAEjG+B,KAETC,QAAQC,IAAIH,GACZD,EAASC,IAGX,SAASpC,EAAWD,GAClB,IAAMqC,EAAeF,EAAMvB,KAAI,SAAC0B,GAAU,IAAD,EAChBA,EAAf/B,aAD+B,MACvB,GADuB,EAEvC,OAAO,2BAAK+B,GAAZ,IAAkB/B,MAAOA,EAAMkC,QAAO,qBAAGzC,KAA4BA,UAEvEoC,EAASC,GAGX,SAASnC,EAAWF,GAClB,IAAMqC,EAAeF,EAAMvB,KAAI,SAAC0B,GAAU,IAAD,EAChBA,EAAf/B,aAD+B,MACvB,GADuB,EAEvC,OAAO,2BACF+B,GADL,IAEE/B,MAAOA,EAAMK,KAAI,SAAC3B,GAKhB,OAJuBA,EAAfe,KACOA,IACbf,EAAKc,WAAad,EAAKc,WAElBd,UAIbmD,EAASC,GAGX,OACE,oCACE,kBAAC,EAAD,MACA,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,kBAAC,EAAD,MACCX,EAAMvB,KAAI,oBAAGN,aAAH,MAAW,GAAX,MAAeC,aAAf,MAAuB,GAAvB,EAA2BP,EAA3B,EAA2BA,GAA3B,OACT,kBAAC,EAAD,CAAMJ,IAAKI,EAAIlB,OAAQkB,EAAIM,MAAOA,EAAOC,MAAOA,EAAON,WAAYA,EAAYC,WAAYA,EAAYnB,QAASA,YCzE1GgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.4b190686.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>ToDo Lists</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport \"./AddTaskItem.css\";\n\nfunction TaskItem({ listId, addTask = () => {} }) {\n  const [task, setTask] = useState(\"\");\n\n  const handleKeyPress = ({ key }) => {\n    if (key === \"Enter\" && task.length) {\n      addAndResetTask();\n    }\n  };\n\n  const updateTask = ({ target: { value = \"\" } = {} }) => {\n    setTask(value);\n  };\n\n  const addAndResetTask = () => {\n    addTask(task, listId);\n    setTask(\"\");\n  };\n\n  return (\n    <div className=\"addTaskItem\">\n      <span onClick={addAndResetTask}>+</span>\n      <input type=\"text\" placeholder=\"Add New Item...\" value={task} onChange={updateTask} onKeyPress={handleKeyPress} />\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React from \"react\";\nimport \"./TaskItem.css\";\n\nfunction TaskItem({ text = \"\", completed = false, id, deleteTask = () => {}, toggleTask = () => {} }) {\n  const delTask = () => {\n    deleteTask(id);\n  };\n\n  const togTask = () => {\n    toggleTask(id);\n  };\n\n  return (\n    <div className=\"taskItem\">\n      <p>\n        <input type=\"checkbox\" defaultChecked={completed} onClick={togTask} />\n        <input type=\"text\" defaultValue={text} className={`taskItem__listItem taskItem__listItem${completed ? \"--complete\" : \"\"}`} />\n        <span onClick={delTask}>Ã—</span>\n      </p>\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React from \"react\";\nimport \"./List.css\";\nimport AddTaskItem from \"../AddTaskItem/AddTaskItem\";\nimport TaskItem from \"../TaskItem/TaskItem\";\n\nfunction List({ listId, title = \"\", tasks = [], deleteTask = () => {}, toggleTask = () => {}, addTask = () => {} }) {\n  //sort tasks by date created then put the uncompleted tasks at the top\n  tasks.sort((a, b) => a.dateCreated - b.dateCreated).sort(({ completed }) => (completed ? 1 : -1));\n\n  return (\n    <div className=\"list\">\n      <h4>{title}</h4>\n      <AddTaskItem listId={listId} addTask={addTask} />\n      {tasks.map(({ text = \"\", completed = false, id }) => (\n        <TaskItem key={id} id={id} text={text} completed={completed} deleteTask={deleteTask} toggleTask={toggleTask} />\n      ))}\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./NewList.css\";\n\nfunction NewList() {\n  const [smShow, setSmShow] = useState(false);\n  const [listName, setListName] = useState(\"\");\n\n  const handleClose = () => setSmShow(false);\n  const handleShow = () => setSmShow(true);\n\n  const updateListName = ({ target: { value = \"\" } = {} }) => {\n    setListName(value);\n  };\n\n  return (\n    <>\n      <div className=\"newList\" onClick={handleShow}>\n        <p>Add New List</p>\n        <button type=\"button\" className=\"newList__addIcon\">\n          +\n        </button>\n      </div>\n\n      <Modal size=\"sm\" show={smShow} onHide={() => setSmShow(false)} aria-labelledby=\"example-modal-sizes-title-sm\">\n        <Modal.Header closeButton>\n          <Modal.Title id=\"example-modal-sizes-title-sm\">Create New List</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <label>\n            List Name:\n            <input type=\"text\" placeholder=\"Enter list name\" value={listName} onChange={updateListName} />\n          </label>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose} disabled={!listName}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default NewList;\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport List from \"./List/List\";\nimport NewList from \"./CreateNewList/NewList\";\n\nfunction App() {\n  const [lists, setLists] = useState([\n    {\n      title: \"Shopping List\",\n      id: uuidv4(),\n      dateCreated: Date.now(),\n      tasks: [\n        { text: \"Paint and oil outdoor furniture\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Hang pictures in bedroom\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order party decorations\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order replacement printer toner\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Organise Metrolink refund\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n      ],\n    },\n    {\n      title: \"Shopping List 2\",\n      id: uuidv4(),\n      dateCreated: Date.now(),\n      tasks: [\n        { text: \"Paint and oil outdoor furniture\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Hang pictures in bedroom\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order party decorations\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order replacement printer toner\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Organise Metrolink refund\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n      ],\n    },\n  ]);\n\n  const addTask = (task, id) => {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      if (list.id === id) {\n        return { ...list, tasks: [{ text: task, completed: false, id: uuidv4(), dateCreated: Date.now() }, ...tasks] };\n      }\n      return list;\n    });\n    console.log(updatedTasks);\n    setLists(updatedTasks);\n  };\n\n  function deleteTask(id) {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      return { ...list, tasks: tasks.filter(({ id: taskid }) => taskid !== id) };\n    });\n    setLists(updatedTasks);\n  }\n\n  function toggleTask(id) {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      return {\n        ...list,\n        tasks: tasks.map((task) => {\n          const { id: taskid } = task;\n          if (taskid === id) {\n            task.completed = !task.completed;\n          }\n          return task;\n        }),\n      };\n    });\n    setLists(updatedTasks);\n  }\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Row>\n          <Col sm={6} md={4}>\n            <NewList />\n            {lists.map(({ title = \"\", tasks = [], id }) => (\n              <List key={id} listId={id} title={title} tasks={tasks} deleteTask={deleteTask} toggleTask={toggleTask} addTask={addTask} />\n            ))}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}