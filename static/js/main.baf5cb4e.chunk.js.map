{"version":3,"sources":["Header/Header.js","ListTitle/ListTitle.js","AddTaskItem/AddTaskItem.js","TaskItem/TaskItem.js","CreateNewList/NewList.js","App.js","serviceWorker.js","index.js"],"names":["Header","ListTitle","className","TaskItem","addTask","useState","task","setTask","addAndResetTask","onClick","type","placeholder","value","onChange","target","onKeyPress","key","text","completed","NewList","App","tasks","setTasks","sort","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAWeA,MARf,WACE,OACE,gCACE,4C,MCKSC,MARf,WACE,OACE,yBAAKC,UAAU,aACb,2C,MCuBSC,MA1Bf,YAA2C,IAAD,IAAtBC,eAAsB,MAAZ,aAAY,IAChBC,mBAAS,IADO,mBACjCC,EADiC,KAC3BC,EAD2B,KAalCC,EAAkB,WACtBJ,EAAQE,GACRC,EAAQ,KAGV,OACE,yBAAKL,UAAU,eACb,0BAAMO,QAASD,GAAf,KACA,2BAAOE,KAAK,OAAOC,YAAY,kBAAkBC,MAAON,EAAMO,SAZ/C,SAAC,GAAqC,IAAD,IAAlCC,OAAkC,gBAAT,GAAS,GAAxBF,MAC9BL,OADsD,MAAhB,GAAgB,IAYgCQ,WAlBjE,SAAC,GACV,UADsB,EAAVC,KAEtBR,S,MCOSL,MAZf,YAAqD,IAAD,IAAhCc,YAAgC,MAAzB,GAAyB,MAArBC,iBAAqB,SAClD,OACE,yBAAKhB,UAAU,YACb,2BACE,2BAAOQ,KAAK,aACZ,2BAAOA,KAAK,OAAOE,MAAOK,EAAMf,UAAS,+CAA0CgB,EAAY,aAAe,MAC9G,yC,MCKOC,MAXf,WACE,OACE,yBAAKjB,UAAU,WACb,2CACA,4BAAQQ,KAAK,SAASR,UAAU,oBAAhC,OCsCSkB,MArCf,WAAgB,IAAD,EACaf,mBAAS,CACjC,CAAEY,KAAM,kCAAmCC,WAAW,GACtD,CAAED,KAAM,2BAA4BC,WAAW,GAC/C,CAAED,KAAM,0BAA2BC,WAAW,GAC9C,CAAED,KAAM,kCAAmCC,WAAW,GACtD,CAAED,KAAM,4BAA6BC,WAAW,KANrC,mBACNG,EADM,KACCC,EADD,KAkBb,OAFAD,EAAME,MAAK,qBAAGL,UAA6B,GAAK,KAG9C,oCACE,kBAAC,EAAD,MACA,yBAAKhB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaE,QAhBP,SAACE,GACfgB,EAAS,CAAC,CAAEL,KAAMX,EAAMY,WAAW,IAA3B,mBAAuCG,QAgBtCA,EAAMG,KAAI,oBAAGP,YAAH,MAAU,GAAV,MAAcC,iBAAd,gBACT,kBAAC,EAAD,CAAUD,KAAMA,EAAMC,UAAWA,YCxB3BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.baf5cb4e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>ToDo Lists</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./ListTitle.css\";\n\nfunction ListTitle() {\n  return (\n    <div className=\"listTitle\">\n      <h4>ListTitle</h4>\n    </div>\n  );\n}\n\nexport default ListTitle;\n","import React, { useState } from \"react\";\nimport \"./AddTaskItem.css\";\n\nfunction TaskItem({ addTask = () => {} }) {\n  const [task, setTask] = useState(\"\");\n\n  const handleKeyPress = ({ key }) => {\n    if (key === \"Enter\") {\n      addAndResetTask();\n    }\n  };\n\n  const updateTask = ({ target: { value = \"\" } = {} }) => {\n    setTask(value);\n  };\n\n  const addAndResetTask = () => {\n    addTask(task);\n    setTask(\"\");\n  };\n\n  return (\n    <div className=\"addTaskItem\">\n      <span onClick={addAndResetTask}>+</span>\n      <input type=\"text\" placeholder=\"Add New Item...\" value={task} onChange={updateTask} onKeyPress={handleKeyPress} />\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React, { useState } from \"react\";\nimport \"./TaskItem.css\";\n\nfunction TaskItem({ text = \"\", completed = false }) {\n  return (\n    <div className=\"taskItem\">\n      <p>\n        <input type=\"checkbox\" />\n        <input type=\"text\" value={text} className={`taskItem__listItem taskItem__listItem${completed ? \"--complete\" : \"\"}`} />\n        <span>Ã—</span>\n      </p>\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React from \"react\";\nimport \"./NewList.css\";\n\nfunction NewList() {\n  return (\n    <div className=\"newList\">\n      <p>Add New List</p>\n      <button type=\"button\" className=\"newList__addIcon\">\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default NewList;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport ListTitle from \"./ListTitle/ListTitle\";\nimport AddTaskItem from \"./AddTaskItem/AddTaskItem\";\nimport TaskItem from \"./TaskItem/TaskItem\";\nimport NewList from \"./CreateNewList/NewList\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { text: \"Paint and oil outdoor furniture\", completed: true },\n    { text: \"Hang pictures in bedroom\", completed: false },\n    { text: \"Order party decorations\", completed: false },\n    { text: \"Order replacement printer toner\", completed: false },\n    { text: \"Organise Metrolink refund\", completed: true },\n  ]);\n\n  //create add task function - console.log(\"testing\")\n  const addTask = (task) => {\n    setTasks([{ text: task, completed: false }, ...tasks]);\n  };\n\n  //pass it down to addtaskitem child\n  //onclick run the function in the child component\n  tasks.sort(({ completed }) => (completed ? 1 : -1));\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-6 col-md-4\">\n            <NewList />\n            <ListTitle />\n            <AddTaskItem addTask={addTask} />\n            {tasks.map(({ text = \"\", completed = false }) => (\n              <TaskItem text={text} completed={completed} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}