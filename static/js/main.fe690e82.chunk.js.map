{"version":3,"sources":["Header/Header.js","Modal/Modal.js","AddTaskItem/AddTaskItem.js","TaskItem/TaskItem.js","List/List.js","CreateNewList/NewList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Modal","title","listname","status","handleClose","onSave","useState","listName","setListName","size","show","onHide","aria-labelledby","closeButton","Title","id","Body","type","placeholder","value","onChange","target","Footer","Button","variant","onClick","disabled","TaskItem","listId","addTask","task","setTask","addAndResetTask","className","onKeyPress","key","length","text","completed","deleteTask","toggleTask","defaultChecked","defaultValue","List","tasks","addList","sort","a","b","dateCreated","smShow","setSmShow","handleShow","name","map","NewList","App","uuidv4","Date","now","lists","setLists","newTitle","updatedLists","list","updatedTasks","console","log","filter","Container","Row","Col","sm","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe690e82.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>ToDo Lists</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport BootstrapModal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./Modal.css\";\n\nfunction Modal({ title = \"\", listname = \"\", status = false, handleClose = () => {}, onSave = () => {} }) {\n  const [listName, setListName] = useState(listname);\n\n  const updateListName = ({ target: { value = \"\" } = {} }) => {\n    setListName(value);\n  };\n\n  const saveChanges = () => {\n    onSave(listName);\n  };\n\n  return (\n    <BootstrapModal size=\"sm\" show={status} onHide={handleClose} aria-labelledby=\"example-modal-sizes-title-sm\">\n      <BootstrapModal.Header closeButton>\n        <BootstrapModal.Title id=\"example-modal-sizes-title-sm\">{title}</BootstrapModal.Title>\n      </BootstrapModal.Header>\n      <BootstrapModal.Body>\n        <label>\n          <input type=\"text\" placeholder=\"Enter list name\" value={listName} onChange={updateListName} />\n        </label>\n      </BootstrapModal.Body>\n      <BootstrapModal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={saveChanges} disabled={!listName}>\n          Save\n        </Button>\n      </BootstrapModal.Footer>\n    </BootstrapModal>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport \"./AddTaskItem.css\";\n\nfunction TaskItem({ listId, addTask = () => {} }) {\n  const [task, setTask] = useState(\"\");\n\n  const handleKeyPress = ({ key }) => {\n    if (key === \"Enter\" && task.length) {\n      addAndResetTask();\n    }\n  };\n\n  const updateTask = ({ target: { value = \"\" } = {} }) => {\n    setTask(value);\n  };\n\n  const addAndResetTask = () => {\n    addTask(task, listId);\n    setTask(\"\");\n  };\n\n  return (\n    <div className=\"addTaskItem\">\n      <span onClick={addAndResetTask}>+</span>\n      <input type=\"text\" placeholder=\"Add New Item...\" value={task} onChange={updateTask} onKeyPress={handleKeyPress} />\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React from \"react\";\nimport \"./TaskItem.css\";\n\nfunction TaskItem({ text = \"\", completed = false, id, deleteTask = () => {}, toggleTask = () => {} }) {\n  const delTask = () => {\n    deleteTask(id);\n  };\n\n  const togTask = () => {\n    toggleTask(id);\n  };\n\n  return (\n    <div className=\"taskItem\">\n      <p>\n        <input type=\"checkbox\" defaultChecked={completed} onClick={togTask} />\n        <input type=\"text\" defaultValue={text} className={`taskItem__listItem taskItem__listItem${completed ? \"--complete\" : \"\"}`} />\n        <span onClick={delTask}>Ã—</span>\n      </p>\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React, { useState } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport AddTaskItem from \"../AddTaskItem/AddTaskItem\";\nimport TaskItem from \"../TaskItem/TaskItem\";\nimport \"./List.css\";\n\nfunction List({ listId, title = \"\", tasks = [], deleteTask = () => {}, toggleTask = () => {}, addTask = () => {}, addList = () => {} }) {\n  //sort tasks by date created then put the uncompleted tasks at the top\n  tasks.sort((a, b) => a.dateCreated - b.dateCreated).sort(({ completed }) => (completed ? 1 : -1));\n\n  const [smShow, setSmShow] = useState(false);\n\n  const handleClose = () => setSmShow(false);\n  const handleShow = () => setSmShow(true);\n\n  const saveChanges = (name) => {\n    addList(name, listId);\n    handleClose();\n  };\n\n  return (\n    <div className=\"list\">\n      <h4>{title}</h4>\n      <button type=\"button\" className=\"list__title__modifier\" onClick={handleShow}>\n        âœŽ\n      </button>\n      <button type=\"button\" className=\"list__title__modifier\" onClick={handleShow}>\n        ðŸ—‘\n      </button>\n      {smShow ? <Modal title={title} listname={title} status={smShow} onSave={saveChanges} /> : \"\"}\n      <AddTaskItem listId={listId} addTask={addTask} />\n      {tasks.map(({ text = \"\", completed = false, id }) => (\n        <TaskItem key={id} id={id} text={text} completed={completed} deleteTask={deleteTask} toggleTask={toggleTask} />\n      ))}\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useState } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport \"./NewList.css\";\n\nfunction NewList({ id, addList = () => {} }) {\n  const [smShow, setSmShow] = useState(false);\n\n  const handleClose = () => setSmShow(false);\n  const handleShow = () => setSmShow(true);\n\n  const onSave = (listName) => {\n    addList(listName, id);\n    handleClose();\n  };\n\n  return (\n    <>\n      <div className=\"newList\" onClick={handleShow}>\n        <p>Add New List</p>\n        <button type=\"button\" className=\"newList__addIcon\">\n          +\n        </button>\n      </div>\n      {smShow ? <Modal title=\"Create New List\" status={smShow} handleClose={handleClose} onSave={onSave} /> : \"\"}\n    </>\n  );\n}\n\nexport default NewList;\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport List from \"./List/List\";\nimport NewList from \"./CreateNewList/NewList\";\n\nfunction App() {\n  const [lists, setLists] = useState([\n    {\n      title: \"Shopping List\",\n      id: uuidv4(),\n      dateCreated: Date.now(),\n      tasks: [\n        { text: \"Paint and oil outdoor furniture\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Hang pictures in bedroom\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order party decorations\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order replacement printer toner\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Organise Metrolink refund\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n      ],\n    },\n    {\n      title: \"Shopping List 2\",\n      id: uuidv4(),\n      dateCreated: Date.now(),\n      tasks: [\n        { text: \"Paint and oil outdoor furniture\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Hang pictures in bedroom\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order party decorations\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Order replacement printer toner\", completed: false, id: uuidv4(), dateCreated: Date.now() },\n        { text: \"Organise Metrolink refund\", completed: true, id: uuidv4(), dateCreated: Date.now() },\n      ],\n    },\n  ]);\n\n  const addList = (newTitle, id) => {\n    if (id) {\n      const updatedLists = lists.map((list) => {\n        if (list.id === id) {\n          return { ...list, title: newTitle };\n        }\n        return list;\n      });\n      setLists(updatedLists);\n    } else {\n      setLists([{ title: newTitle, id: uuidv4(), dateCreated: Date.now(), tasks: [] }, ...lists]);\n    }\n  };\n\n  const addTask = (task, id) => {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      if (list.id === id) {\n        return { ...list, tasks: [{ text: task, completed: false, id: uuidv4(), dateCreated: Date.now() }, ...tasks] };\n      }\n      return list;\n    });\n    console.log(updatedTasks);\n    setLists(updatedTasks);\n  };\n\n  function deleteTask(id) {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      return { ...list, tasks: tasks.filter(({ id: taskid }) => taskid !== id) };\n    });\n    setLists(updatedTasks);\n  }\n\n  function toggleTask(id) {\n    const updatedTasks = lists.map((list) => {\n      const { tasks = [] } = list;\n      return {\n        ...list,\n        tasks: tasks.map((task) => {\n          const { id: taskid } = task;\n          if (taskid === id) {\n            task.completed = !task.completed;\n          }\n          return task;\n        }),\n      };\n    });\n    setLists(updatedTasks);\n  }\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Row>\n          <Col sm={6} md={4}>\n            <NewList addList={addList} />\n            {lists.map(({ title = \"\", tasks = [], id }) => (\n              <List\n                key={id}\n                listId={id}\n                title={title}\n                tasks={tasks}\n                deleteTask={deleteTask}\n                toggleTask={toggleTask}\n                addTask={addTask}\n                addList={addList}\n              />\n            ))}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}